// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TestService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <opencv2/opencv.hpp>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class TestServiceHandler : virtual public TestServiceIf {
 public:
  TestServiceHandler() {
    // Your initialization goes here
  }

	void test(const std::string& img_, const double odom_x, const double odom_y, const double odom_th) {
		// Your implementation goes here
		std::vector<uchar> bytesImg( img_.begin(),img_.end());
		cv::Mat image = cv::imdecode( bytesImg, CV_LOAD_IMAGE_COLOR );

		cv::imshow("img_decode", image);
		cv::waitKey(1);
		printf("test-- odom: \n");
		std::cout << "odom_x:" << odom_x
				  << " odom_y:" << odom_y
				  << " odom_th:" << odom_th << std::endl;
	}

};

int main(int argc, char **argv) {
	int port = 9060;
	shared_ptr<TestServiceHandler> handler(new TestServiceHandler());
	shared_ptr<TProcessor> processor(new TestServiceProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
	return 0;
}


